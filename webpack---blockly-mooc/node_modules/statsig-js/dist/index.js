"use strict";
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StatsigAsyncStorage = exports.EvaluationReason = exports.StatsigClient = exports.Layer = exports.DynamicConfig = exports.FeatureGate = void 0;
var Errors_1 = require("./Errors");
var StatsigClient_1 = __importDefault(require("./StatsigClient"));
var StatsigRuntime_1 = __importDefault(require("./StatsigRuntime"));
var Object_entries_1 = __importDefault(require("./utils/Object.entries"));
var Object_fromEntries_1 = __importDefault(require("./utils/Object.fromEntries"));
var Promise_finally_1 = __importDefault(require("./utils/Promise.finally"));
var EvaluationReason_1 = require("./utils/EvaluationReason");
var FeatureGate_1 = require("./FeatureGate");
Object.defineProperty(exports, "FeatureGate", {
    enumerable: true,
    get: function() {
        return __importDefault(FeatureGate_1).default;
    }
});
var DynamicConfig_1 = require("./DynamicConfig");
Object.defineProperty(exports, "DynamicConfig", {
    enumerable: true,
    get: function() {
        return __importDefault(DynamicConfig_1).default;
    }
});
var Layer_1 = require("./Layer");
Object.defineProperty(exports, "Layer", {
    enumerable: true,
    get: function() {
        return __importDefault(Layer_1).default;
    }
});
var StatsigClient_2 = require("./StatsigClient");
Object.defineProperty(exports, "StatsigClient", {
    enumerable: true,
    get: function() {
        return __importDefault(StatsigClient_2).default;
    }
});
var EvaluationReason_2 = require("./utils/EvaluationReason");
Object.defineProperty(exports, "EvaluationReason", {
    enumerable: true,
    get: function() {
        return EvaluationReason_2.EvaluationReason;
    }
});
var StatsigAsyncStorage_1 = require("./utils/StatsigAsyncStorage");
Object.defineProperty(exports, "StatsigAsyncStorage", {
    enumerable: true,
    get: function() {
        return __importDefault(StatsigAsyncStorage_1).default;
    }
});
(0, Object_entries_1.default)();
(0, Object_fromEntries_1.default)();
(0, Promise_finally_1.default)();
var Statsig = /** @class */ (function() {
    function Statsig() {}
    Object.defineProperty(Statsig, "encodeIntializeCall", {
        get: function() {
            return StatsigRuntime_1.default.encodeInitializeCall;
        },
        set: function(value) {
            StatsigRuntime_1.default.encodeInitializeCall = value;
        },
        enumerable: false,
        configurable: true
    });
    Statsig.initialize = function(sdkKey, user, options) {
        var _a;
        return __awaiter(this, void 0, void 0, function() {
            var inst;
            return __generator(this, function(_b) {
                inst = (_a = Statsig.instance) !== null && _a !== void 0 ? _a : new StatsigClient_1.default(sdkKey, user, options);
                if (!Statsig.instance) {
                    Statsig.instance = inst;
                }
                return [2 /*return*/ , inst.initializeAsync()];
            });
        });
    };
    Statsig.prefetchUsers = function(users) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch (_a.label) {
                    case 0:
                        return [4 /*yield*/ , Statsig.getClientX().prefetchUsers(users)];
                    case 1:
                        return [2 /*return*/ , _a.sent()];
                }
            });
        });
    };
    Statsig.setInitializeValues = function(initializeValues) {
        Statsig.getClientX().setInitializeValues(initializeValues);
    };
    Statsig.checkGate = function(gateName, ignoreOverrides) {
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().checkGate(gateName, ignoreOverrides);
    };
    Statsig.checkGateWithExposureLoggingDisabled = function(gateName, ignoreOverrides) {
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().checkGateWithExposureLoggingDisabled(gateName, ignoreOverrides);
    };
    Statsig.getFeatureGate = function(gateName, options) {
        if (options === void 0) {
            options = null;
        }
        return Statsig.getClientX().getFeatureGate(gateName, options);
    };
    Statsig.manuallyLogGateExposure = function(gateName) {
        Statsig.getClientX().logGateExposure(gateName);
    };
    Statsig.getConfig = function(configName, ignoreOverrides) {
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().getConfig(configName, ignoreOverrides);
    };
    Statsig.getConfigWithExposureLoggingDisabled = function(configName, ignoreOverrides) {
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().getConfigWithExposureLoggingDisabled(configName, ignoreOverrides);
    };
    Statsig.manuallyLogConfigExposure = function(configName) {
        Statsig.getClientX().logConfigExposure(configName);
    };
    Statsig.getExperiment = function(experimentName, keepDeviceValue, ignoreOverrides) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().getExperiment(experimentName, keepDeviceValue, ignoreOverrides);
    };
    Statsig.getExperimentWithExposureLoggingDisabled = function(experimentName, keepDeviceValue, ignoreOverrides) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        if (ignoreOverrides === void 0) {
            ignoreOverrides = false;
        }
        return Statsig.getClientX().getExperimentWithExposureLoggingDisabled(experimentName, keepDeviceValue, ignoreOverrides);
    };
    Statsig.manuallyLogExperimentExposure = function(configName, keepDeviceValue) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        Statsig.getClientX().logExperimentExposure(configName, keepDeviceValue);
    };
    Statsig.getLayer = function(layerName, keepDeviceValue) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        return Statsig.getClientX().getLayer(layerName, keepDeviceValue);
    };
    Statsig.getLayerWithExposureLoggingDisabled = function(layerName, keepDeviceValue) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        return Statsig.getClientX().getLayerWithExposureLoggingDisabled(layerName, keepDeviceValue);
    };
    Statsig.manuallyLogLayerParameterExposure = function(layerName, parameterName, keepDeviceValue) {
        if (keepDeviceValue === void 0) {
            keepDeviceValue = false;
        }
        Statsig.getClientX().logLayerParameterExposure(layerName, parameterName, keepDeviceValue);
    };
    Statsig.logEvent = function(eventName, value, metadata) {
        if (value === void 0) {
            value = null;
        }
        if (metadata === void 0) {
            metadata = null;
        }
        return Statsig.getClientX().logEvent(eventName, value, metadata);
    };
    Statsig.updateUser = function(user) {
        return Statsig.getClientX().updateUser(user);
    };
    Statsig.updateUserWithValues = function(user, values) {
        return Statsig.getClientX().updateUserWithValues(user, values);
    };
    Statsig.shutdown = function() {
        Statsig.getClientX().shutdown();
        Statsig.instance = null;
    };
    /**
     * Overrides the given gate locally with the given value
     * @param gateName - name of the gate to override
     * @param value - value to assign to the gate
     */
    Statsig.overrideGate = function(gateName, value) {
        Statsig.getClientX().overrideGate(gateName, value);
    };
    /**
     * Overrides the given config locally with the given value
     * @param configName - name of the config to override
     * @param value - value to assign to the config
     */
    Statsig.overrideConfig = function(configName, value) {
        Statsig.getClientX().overrideConfig(configName, value);
    };
    /**
     * Overrides the given layer locally with the given value
     * @param layerName - name of the layer to override
     * @param value - value to assign to the layer
     */
    Statsig.overrideLayer = function(layerName, value) {
        Statsig.getClientX().overrideLayer(layerName, value);
    };
    /**
     * @param name the gate override to remove. Leave this parameter empty to remove all gate overrides.
     */
    Statsig.removeGateOverride = function(name) {
        Statsig.getClientX().removeGateOverride(name);
    };
    /**
     * @param name the config override to remove. Leave this parameter empty to remove all config overrides.
     */
    Statsig.removeConfigOverride = function(name) {
        Statsig.getClientX().removeConfigOverride(name);
    };
    /**
     * @param name the layer override to remove. Leave this parameter empty to remove all layer overrides.
     */
    Statsig.removeLayerOverride = function(name) {
        Statsig.getClientX().removeLayerOverride(name);
    };
    /**
     * @returns The local gate and config overrides
     */
    Statsig.getAllOverrides = function() {
        return Statsig.getClientX().getAllOverrides();
    };
    /**
     * @returns The Statsig stable ID used for device level experiments
     */
    Statsig.getStableID = function() {
        return Statsig.getClientX().getStableID();
    };
    /**
     *
     * @returns The reason and time associated with the evaluation for the current set
     * of gates and configs
     */
    Statsig.getEvaluationDetails = function() {
        var _a, _b;
        return ((_b = (_a = Statsig.instance) === null || _a === void 0 ? void 0 : _a.getEvaluationDetails()) !== null && _b !== void 0 ? _b : {
            reason: EvaluationReason_1.EvaluationReason.Uninitialized,
            time: 0,
        });
    };
    Statsig.getInitializeResponseJson = function() {
        return Statsig.getClientX().getInitializeResponseJson();
    };
    /**
     * @deprecated use removeGateOverride or removeConfigOverride
     * @param name the gate override to remove
     */
    Statsig.removeOverride = function(name) {
        Statsig.getClientX().removeOverride(name);
    };
    /**
     * @deprecated use getAllOverrides
     * @returns the gate overrides
     */
    Statsig.getOverrides = function() {
        return Statsig.getClientX().getOverrides();
    };
    /**
     * @returns true if initialize has already been called, false otherwise
     */
    Statsig.initializeCalled = function() {
        return Statsig.instance != null && Statsig.instance.initializeCalled();
    };
    /**
     * Send any currently queued events to Statsig
     */
    Statsig.flushEvents = function() {
        Statsig.getClientX().flushEvents();
    };
    /**
     * @params Debug information log with exposure event, and information will be living in metadata
     */
    Statsig.setDebugInfo = function(debugInfo) {
        Statsig.getClientX().setDebugInfo(debugInfo);
    };
    /**
     * Intended to be used in conjunction with StatsigOptions.disableAllLogging.
     * This will set StatsigOptions.disableAllLogging to false, thereby enabling logs to function normally.
     */
    Statsig.reenableAllLogging = function() {
        Statsig.getClientX().reenableAllLogging();
    };
    Statsig.getClientX = function() {
        if (!Statsig.instance) {
            throw new Errors_1.StatsigUninitializedError();
        }
        return Statsig.instance;
    };
    Statsig.instance = null;
    return Statsig;
}());
exports.default = Statsig;