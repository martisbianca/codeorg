"use strict";
var __awaiter = (this && this.__awaiter) || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new(P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }

        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }

        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function(thisArg, body) {
    var _ = {
            label: 0,
            sent: function() {
                if (t[0] & 1) throw t[1];
                return t[1];
            },
            trys: [],
            ops: []
        },
        f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;

    function verb(n) {
        return function(v) {
            return step([n, v]);
        };
    }

    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [6, e];
            y = 0;
        } finally {
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __importDefault = (this && this.__importDefault) || function(mod) {
    return (mod && mod.__esModule) ? mod : {
        "default": mod
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ExceptionEndpoint = void 0;
var uuid_1 = require("uuid");
var Errors_1 = require("./Errors");
var Diagnostics_1 = __importDefault(require("./utils/Diagnostics"));
var parseError_1 = __importDefault(require("./utils/parseError"));
exports.ExceptionEndpoint = 'https://statsigapi.net/v1/sdk_exception';
var MAX_DIAGNOSTICS_MARKERS = 30;
var SAMPLING_RATE = 10000;
var ErrorBoundary = /** @class */ (function() {
    function ErrorBoundary(sdkKey, sdkOptions) {
        this.sdkKey = sdkKey;
        this.sdkOptions = sdkOptions;
        this.seen = new Set();
        var sampling = Math.floor(Math.random() * SAMPLING_RATE);
        this.setupDiagnostics(sampling === 0 ? MAX_DIAGNOSTICS_MARKERS : 0);
    }
    ErrorBoundary.prototype.setStatsigMetadata = function(statsigMetadata) {
        this.statsigMetadata = statsigMetadata;
    };
    ErrorBoundary.prototype.swallow = function(tag, task, options) {
        if (options === void 0) {
            options = {};
        }
        this.capture(tag, task, function() {
            return undefined;
        }, options);
    };
    ErrorBoundary.prototype.capture = function(tag, task, recover, captureOptions) {
        var _this = this;
        if (captureOptions === void 0) {
            captureOptions = {};
        }
        var markerID = null;
        try {
            markerID = this.beginMarker(tag);
            var result = task();
            var wasSuccessful_1 = true;
            if (result instanceof Promise) {
                return result
                    .catch(function(e) {
                        wasSuccessful_1 = false;
                        return _this.onCaught(tag, e, recover, captureOptions);
                    })
                    .then(function(possiblyRecoveredResult) {
                        _this.endMarker(tag, wasSuccessful_1, markerID);
                        return possiblyRecoveredResult;
                    });
            }
            this.endMarker(tag, true, markerID, captureOptions.configName);
            return result;
        } catch (error) {
            this.endMarker(tag, false, markerID, captureOptions.configName);
            return this.onCaught(tag, error, recover, captureOptions);
        }
    };
    ErrorBoundary.prototype.logError = function(tag, error, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a,
            getExtraData = _b.getExtraData,
            configName = _b.configName;
        if (this.sdkOptions.isAllLoggingDisabled()) {
            return;
        }
        (function() {
            return __awaiter(_this, void 0, void 0, function() {
                var extra, _a, _b, name_1, info, metadata, body, _error_1;
                var _c;
                return __generator(this, function(_d) {
                    switch (_d.label) {
                        case 0:
                            _d.trys.push([0, 4, , 5]);
                            if (!(typeof getExtraData === 'function')) return [3 /*break*/ , 2];
                            return [4 /*yield*/ , getExtraData()];
                        case 1:
                            _a = _d.sent();
                            return [3 /*break*/ , 3];
                        case 2:
                            _a = {};
                            _d.label = 3;
                        case 3:
                            extra = _a;
                            _b = (0, parseError_1.default)(error), name_1 = _b.name, info = _b.trace;
                            extra["configName"] = configName;
                            if (this.seen.has(name_1))
                                return [2 /*return*/ ];
                            this.seen.add(name_1);
                            metadata = (_c = this.statsigMetadata) !== null && _c !== void 0 ? _c : {};
                            if (metadata.sessionID == null) {
                                metadata.sessionID = (0, uuid_1.v4)();
                            }
                            body = JSON.stringify({
                                tag: tag,
                                exception: name_1,
                                info: info,
                                statsigMetadata: metadata,
                                statsigOptions: this.sdkOptions.getLoggingCopy(),
                                extra: extra
                            });
                            return [2 /*return*/ , fetch(exports.ExceptionEndpoint, {
                                method: 'POST',
                                headers: {
                                    'STATSIG-API-KEY': this.sdkKey,
                                    'STATSIG-SDK-TYPE': String(metadata['sdkType']),
                                    'STATSIG-SDK-VERSION': String(metadata['sdkVersion']),
                                    'Content-Type': 'application/json; charset=UTF-8',
                                },
                                body: body,
                            })];
                        case 4:
                            _error_1 = _d.sent();
                            return [3 /*break*/ , 5];
                        case 5:
                            return [2 /*return*/ ];
                    }
                });
            });
        })().catch(function() {
            /*noop*/
        });
    };
    ErrorBoundary.prototype.setupDiagnostics = function(maxMarkers) {
        Diagnostics_1.default.setMaxMarkers('api_call', maxMarkers);
    };
    ErrorBoundary.prototype.beginMarker = function(tag) {
        var diagnostics = Diagnostics_1.default.mark.api_call(tag);
        if (!diagnostics) {
            return null;
        }
        var count = Diagnostics_1.default.getMarkerCount('api_call');
        var markerID = tag + "_" + count;
        var wasAdded = diagnostics.start({
            markerID: markerID,
        }, 'api_call');
        return wasAdded ? markerID : null;
    };
    ErrorBoundary.prototype.endMarker = function(tag, wasSuccessful, markerID, configName) {
        var diagnostics = Diagnostics_1.default.mark.api_call(tag);
        if (!markerID || !diagnostics) {
            return;
        }
        diagnostics.end({
            markerID: markerID,
            success: wasSuccessful,
            configName: configName,
        }, 'api_call');
    };
    ErrorBoundary.prototype.onCaught = function(tag, error, recover, captureOptions) {
        if (captureOptions === void 0) {
            captureOptions = {};
        }
        if (error instanceof Errors_1.StatsigUninitializedError ||
            error instanceof Errors_1.StatsigInvalidArgumentError) {
            throw error; // Don't catch these
        }
        if (error instanceof Errors_1.StatsigInitializationTimeoutError) {
            console.error('[Statsig] Timeout occured.', error);
            return recover();
        }
        console.error('[Statsig] An unexpected exception occurred.', error);
        this.logError(tag, error, captureOptions);
        return recover();
    };
    return ErrorBoundary;
}());
exports.default = ErrorBoundary;